const Page = () => {
    return (
      <div>
        <h1>カスタムコンポーネント</h1>
        <h3 style={{marginTop: 40}}>カスタムコントローラー</h3>
        <p>
         カスタムコンポーネントは、HTMLの標準のフォームコントロールを複数組み合わせてカスタマイズしたもの、また複数のHTML要素を組み合わせて実装したUIのこと。
         HTML標準のフォームコントロールだとwebサービスにそぐわない場合にHTMLの標準のフォームコントロールを設計する必要がある。
        </p>
        <h3 style={{marginTop: 40}}>カスタムコンポーネント</h3>
        <p>
         カスタムコンポーネントとは、複数のHTML要素を組み合わせて実装したUIのこと。
         カスタムコンポーネントにカスタムコントローラーを含む。
         カスタムコンポーネントをマシンリーダブルにするには、WAI-AREAの理解が必要なため、、WAI-AREAの解説を参照しながらどのようにカスタムコンポーネントを実装するか解説していく。
        </p>
        <p>
         カスタムコンポーネントは、HTMLの標準のフォームコントロールを複数組み合わせてカスタマイズしたもの、また複数のHTML要素を組み合わせて実装したUIのこと。
         HTML標準のフォームコントロールだとwebサービスにそぐわない場合にHTMLの標準のフォームコントロールを設計する必要がある。
        </p>
        {/* 1 */}
        <h2 style={{marginTop: 40}}>よくある事例と改善案</h2>
        <h3 style={{marginTop: 40}}>事例1. カスタムコンポーネントの必要性を吟味していない</h3>
        <p>
          カスタムコンポーネントをアクセスブルにするには実装コストが大きく、他の開発が遅れてしまう可能性がある。カスタムコンポーネントをアクセスブルにする工程が長すぎて、アクセスビリティが不十分なままリリースする可能性がある。
        </p>
        <h4 style={{marginTop: 20}}>解決策 カスタムコンポーネントが必要あるか吟味する。</h4>
        <ul>
          <li>実装することのコストパフォーマンスを吟味する</li>
          <p>
            HTMLの標準フォームコントロールを利用することでコストを大幅に削減できる。
            複雑なコンポーネントをいくつかのシンプルなコンポーネントに分割できないかを考えてみる。それができたらアクセスビリティが担保されるため実装コストが減る。
          </p>
        </ul>
        {/* 2 */}
        <h3 style={{marginTop: 60}}>事例2. 既存のカスタムコンポーネントサンプルを参考にしていない</h3>
        <p>
          カスタムコンポーネントを作るときに,既存のカスタムコンポーネントを参考にせず自分の知識だけで自作すると、アクセスビリティが担保されない可能性がある。
          自己流だとHTMLやWAI-ARIAに関するさまざまな仕様書をいちから調査する必要があり開発コストが高くなってしまう。また仕様を満たさないカスタムコンポーネントを開発してしまうリスクもある
        </p>
        <h4>解決策  アクセスビリティが配慮されたカスタムコンポーネントサンプルを参照する</h4>
        <a href="https://www.w3.org/WAI/ARIA/apg/" target='_blank'>Aria Authoring Practices Guide</a>
        <ul>
          <li>推奨されるWAI-ARIAのロール・ステート・プロパティ</li>
          <li>推奨されるキーボード操作</li>
          <li>実装例のデモ</li>
        </ul>
        <h4>注意点 カスタムコンポーネントサンプルだけでは実装が難しい場合がある。</h4>
        {/* 3 */}
        <h3 style={{marginTop: 60}}>事例3. キーボード操作が適切にされていない</h3>
        <p>
          ユーザーの中にキーボード操作でwebサイトを操作していたときに、フォーカスできなかったり意図しない位置に移動してしまったときには離脱する可能性がある
        </p>
        <h4 style={{marginTop: 60}}>解決策 適切なキーボード設計にする</h4>
        <ul style={{marginTop: 20}}>
            <li>標準的なサポートをする</li>
            <li>フォーカスが破綻しないようにすrつ </li>
            <li>不適切な要素にフォーカスできなようにする</li>
        </ul>
        {/* 4*/}
        <h3 style={{marginTop: 60}}>事例4. WAI-ARIAの使用に従ったロールが設定されていない</h3>
        <p>
          仕様に従ってロールを付与しないと、追加したロールが支援技術に認識されないばかりか、元々のHTMLのネイティブせマンティックスすら伝わらなくなってしまう。
          支援技術を利用するユーザーにとってはコンポーネントの構造を誤解したりカスタムコントローラーを操作できなくなる可能性がある。
        </p>
        <h4>解決策  適切なWAI-ARIAロールを検討する</h4>
           <p>HTMLのネイティブセマンティクスだけでは、カスタムコンポーネントを表す構造になっていない。
           以下はHTMLのセマンティクスでは表わせないロールの一覧</p>
            <ul style={{marginTop: 20}}>
            <li>tabロール</li>
            <li>tablistロール</li>
            <li>treeロール</li>
            <li>treeitemロール</li>
            </ul>

            <p style={{marginTop: 20}}>注意点</p>
            <ul style={{marginTop: 20}}>
            <li>
              <a style={{marginTop: 20}} href="https://momdo.github.io/html-aria" target='_blank'>ロールが現在のHTMLに適用できるか確認する</a>
            </li>
            <li>  
                 <a style={{marginTop: 20}} href="https://momdo.github.io/wai-aria-1.2" target='_blank'>ロールに対して必須の構造があるか確かめる</a>
            </li>
            </ul>
        {/* よくある課題5 */}
        <h4>事例5. WAI-ARIAの仕様に仕上がったプロパティ・ステートが設定されていない</h4>
        <p>
         カスタムコンポーネントに付与したプロパティ・ステートがWAI-ARIAの仕様に従ってない場合がある。使用に従ってプロパティ・ステートを付与しないと、付与したプロパティ・ステートを支援技術が無視してしまう場合がある。
        </p>
        <h4>解決策 適切なWAIーARIAプロパティ・ステートを検討する</h4>
        <ul>
          <li>カスタムコンポーネントでは、ロールを指定するだけではなく、カスタムコンポーネントの現在の状態を伝えなければならない。</li>
        </ul>
      </div>
    );
  };
  
  export default Page;
  