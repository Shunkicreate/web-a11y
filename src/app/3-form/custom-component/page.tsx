import ShowCode from "@/components/showCode";
import Link from "next/link";
const Page = () => {
	const ButtonExample = `
<button>
    <img src="/imgs/add.svg" alt="追加"/>
</button>
`;
	const BadButtonExample = `
<div className="Button">
    <svg className="Icon -add" >
        <g opacity="0.64" clip-path="url(#clip0_1211_2)">
            <circle cx="32" cy="32" r="30.5" fill="white" stroke="black" stroke-width="3"/>
            <rect x="30" y="17" width="4" height="30" fill="black"/>
            <rect x="17" y="34" width="4" height="30" transform="rotate(-90 17 34)" fill="black"/>
        </g>    
    </svg>
</div>
`;
	const CheckboxExample = `
<label htmlFor="checkbox">
    <input type="checkbox" checked id="checkbox" />
    同意する
</label>
`;
	const TabExample = `
<div role="tablist">
    <button role="tab" aria-selected="true" id="search-tab">検索して追加</button>
    <button role="tab" aria-selected="false" id="file-tab">ファイルから追加</button>
</div>
<div role="tabpanel" aria-labelledby="seach-tab" aria-hidden="false">
(省略)
</div>
<div role="tabpanel" aria-labelledby="file-tab" aria-hidden="true">
(省略)
</div>
`;

	return (
		<div>
			<h1>カスタムコンポーネント</h1>
			<h2>カスタムコンポーネント</h2>
			<p>Webサービスによっては、下記のような理由でHTMLの標準的なフォームコントロールが利用できず、カスタムコントロールが必要になることがあります。
			</p>
			<ul>
				<li>HTML標準のフォームコントロールの見た目がWebサービスにそぐわない場合がある
					<ul>
						<li>フォームコントロールによってはCSSを利用しても見た目を変更できない場合がある</li>
					</ul>
				</li>
				<li>複雑な機能を持ったカスタムコンポーネントが必要になる場合がある</li>
			</ul>
			<p>カスタムコンポーネントをマシンリーダブルにするには、WAI-ARIAに対する深い理解が必要です。WAI-ARIAの使用を定めた文書やWAI-ARIAを解説した文書を参照しながらWAI-ARIAを利用する必要があります。</p>

			<h2>カスタムコンポーネントをマシンリーダブルにする</h2>
			<h3>カスタムコンポーネントの必要性を吟味する</h3>
			<p>カスタムコンポーネントをアクセシブルにするには、デザイン・実装ともに大きなコストが必要です。そのため、他の開発が遅れてしまったり、充分な工数を確保できずにアクセシビリティが不十分な状態でリリースせざるを得なくなったりする恐れがあります。さらに、カスタムコンポーネントのデザインによっては、いくら工数を支払ったとしてもアクセシブルにすることに限界がある場合もあります。</p>

			<h4>カスタムコンポーネントを避ける</h4>
			<p>カスタムコンポーネントを避ける方法を考えてみましょう。カスタムコンポーネントを避けることができれば、コストを節約でき、アクセシビリティを向上させるべき別の箇所に注力できます。</p>
			<p>カスタムコンポーネントを避けるには、以下の方法があります。</p>
			<ul>
				<li>HTML標準のフォームコントロールで置き換える
					<ul>
						<li>ビジュアルデザインが許容できるのであれば、標準のフォームコントロールを利用することでコストを削減できる</li>
					</ul>
				</li>
			</ul>
			<ul>
				<li>複雑なコンポーネントをシンプルなコンポーネントに置き換える</li>
			</ul>

			<h4>カスタムコンポーネントを利用すべきか検討する</h4>
			<p>カスタムコンポーネントは、そもそも利用すべきか検討することが重要です。高いコストを支払ってカスタムコンポーネントを実装することが、コストパフォーマンスに見合うかどうかを検討してみましょう。</p>

			<h3>カスタムコンポーネントサンプルを参照する</h3>
			<p>世の中には、アクセシビリティを考慮して設計された、たくさんのカスタムコンポーネントサンプルが公開されています。サンプルに頼らずに自己流で開発しようとすると、HTMLやWAI-ARIAに関する様々な仕様書をいちから調査するコストがかかったり、仕様を満たさないカスタムコンポーネントを開発してしまったりしてしまいます。正しいサンプルを参照して、それらのリスクを下げることが大切です。</p>
			<p>
				最もよく参照されるカスタムコンポーネントサンプルのひとつは<a href="https://www.w3.org/WAI/ARIA/apg/">「ARIA Authoring Practices Guide (APG)」</a>です。この文書では、WAI-ARIAを利用してさまざまなカスタムコンポーネントを実装する方法がパターンとして解説されています。	サンプルには、カスタムコンポーネントごとに主に以下の内容が解説されています。
			</p>
			<ul>
				<li>推奨されるキーボード操作
					<ul>
						<li>OSのGUIをもとにした標準的なキーボード操作を解説している</li>
					</ul>
				</li>
				<li>推奨されるWAI-ARIAのロール・ステート・プロパティ
					<ul>
						<li>WAI-ARIAの仕様を満たしたうえでカスタムコンポーネントに適したロール・ステート・プロパティが選ばれている</li>
					</ul>
				</li>
				<li>実装例のデモ
					<ul>
						<li>実際の操作やWAI-ARIAをどのように付与すべきかなどを検証でき、実装のイメージができる</li>
					</ul>
				</li>
			</ul>
			<p>ただし、カスタムコンポーネントサンプルだけでは実現が難しい場合もあります。たとえば、実装しようとしているカスタムコンポーネントとサンプルの仕様が異なっていると、そのまま実装することはできません。サンプルに従えない場合は、以降で解説するさまざまな仕様書を参考にしながら、自分自身でカスタムコンポーネントの実装方法を検討する必要があります。</p>

			<h2>カスタムコンポーネントを適切に設計する(具体的方法)</h2>
			<h3>適切なキーボード操作を設計する</h3>
			<p><a href="../../2-basic/2_basic_keyboard">2.2節「キーボード操作の基本」</a>では基本的なキーボード操作のサポート方法について解説しました。2.2節の内容に加えて、カスタムコンポーネントでは以下の観点に注意を払う必要があります。</p>
			<ul>
				<li>標準的なキーボード操作をサポートする</li>
				<li>フォーカスが破綻しないようにする</li>
				<li>不適切な要素にフォーカスできないようにする</li>
			</ul>
			<h4>OSやブラウザが提供している標準的なキーボード操作に従う</h4>
			<p>操作するキーは、カスタムコンポーネントの種類に応じて決まっています。</p>
			<aside><kbd>Tab</kbd>キーでフォーカスし、<kbd>Space</kbd>キーまたは<kbd>Enter</kbd>キーでアクションを実行します。タブなどの複数のオプションから構成されたカスタムコンポーネントは、<kbd>Tab</kbd>キーでフォーカスし、矢印キーでオプションを選択します。</aside>
			<p>標準的なキーボード操作に従うことで、ユーザは今まで学習した操作方法でカスタムコンポーネントを操作できるようになります。</p>
			<h4>フォーカスが破綻しないようにする</h4>
			<p>キーボード操作の設計を誤ると、キーボードだけではフォーカスできない箇所ができてしまったり、フォーカスがユーザの意図しない位置に移動してしまったりしてしまいます。キーボード操作の破綻には、以下に示すいくつかの典型的なパターンがあります。</p>
			<ul>
				<li><Link href="/3-form/custom-component/focus-reset-example">フォーカスのリセット</Link>
					<ul>
						<li>フォーカスがbody要素に移動してしまい、キーボード操作がページの先頭からやり直しになること</li>
						<li>フォーカスしている要素を削除したり非表示にしたりしたときに発生</li>
					</ul>
				</li>
				<li><Link href="/3-form/custom-component/focustrap-example">フォーカストラップ</Link>
					<ul>
						<li>フォーカスが一定の要素内に閉じ込められること</li>
						<li>例：<kbd>Tab</kbd>キーでタブスペースを入力できるようにしてしまうと、<kbd>Tab</kbd>キーを押してもテキストエディタの中からフォーカスが抜け出せなくなってしまう。</li>
					</ul>
				</li>
				<li><Link href="/3-form/custom-component/eternal-scroll-example">無限スクロール</Link>
					<ul>
						<li>あるリストの末尾までスクロールすると、リストアイテムが自動的に読み込まれること</li>
						<li>リストより後の要素にフォーカスができなくなってしまう</li>
					</ul>
				</li>
			</ul>
			<p>パターンごとに問題点と対処方法をおさえておきましょう。</p>
			<h4>不適切な要素にフォーカスできないようにする</h4>
			<p>アクセシビリティオブジェクトモデルから削除された要素(<code>aria-hidden="true"</code>内の要素)にフォーカスできないようにしましょう。スクリーンリーダーは<code>aria-hidden="true"</code>を付けた要素を読み上げないものの、<kbd>Tab</kbd>キー等を利用してフォーカスできることはできてしまいます。</p>
			<p><code>aria-hidden="true"</code>を付けた要素の中にフォーカス可能な要素があるのなら、<code>tabindex="-1"</code>を付けることでユーザがキーボード操作でフォーカスすることを防げます。</p>

			<h3>適切なWAI-ARIAロールを検討する</h3>
			<h4>適切なロールを指定する</h4>
			<p>より適切なロールがないか検討しましょう。ネイティブセマンティクスだけでは、カスタムコンポーネントを表す充分な構造・意味を伝えられるとはかぎらないからです。</p>
			<h4>WAI-ARIAでロールを直接指定する必要のあるロール</h4>
			<p>ロールの中には、HTMLのネイティブセマンティクスでは表せない以下のようなロールがあります。</p>
			<ul>
				<li>tabロール(<code>role="tab"</code>)</li>
				<li>tablistロール(<code>role="tablist"</code>)</li>
				<li>tabpanelロール(<code>role="tabpanel"</code>)</li>
				<li>treeロール(<code>role="tree"</code>)</li>
				<li>treeitemロール(<code>role="treeitem"</code>)</li>
			</ul>
			<p>これらにはWAI-ARIAで直接ロールを指定しましょう。適切なロールを付与することで、より正確な意味・構造を支援技術に伝えられます。</p>
			<h4>ロールの制約に従う</h4>
			<p>ロールを利用するには守らなければならないいくつかの制約があります。ロールを正しく利用しないとかえってアクセシビリティが低下する恐れがあります。</p>
			<p>ロールを指定する時には特に以下の点を守りましょう。</p>
			<ul>
				<li>ロールが現在のHTML要素に適用できるか確かめる</li>
				<ul>
					<li></li>
				</ul>
				<li>ロールに対して必須の構造があるか確かめる</li>
			</ul>
		
			{/* <ShowCode code={BadButtonExample} /> */}
		</div>
	);
};

export default Page;

